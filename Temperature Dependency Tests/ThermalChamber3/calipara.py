import numpy as np
import matplotlib.pyplot as plt

sensor = ["cst", "csv", "img", "emg", "gro"]
test = [[0, -30, -20, -10, 0, 20], [20, 10, 0, -10, -20, -30], [10, 20, 30, 40],
        [40, 50, 60, 70, 80], [80, 70, 60, 50, 40, 30, 20]]
seq = range(-30, 90, 10)
data = [[[0.22909030793417884, 0.003356498794675609, 0.12478748747510741, 0.19454020700136251],
         [-30.313011231787247, -30.39431863536678, -30.611630233803883, -30.63335307474162],
         [-19.931888926444653, -20.165866518103538, -20.0684485827368, -19.986311145865752],
         [-9.797491588155209, -10.049289589516679, -9.92157370251872, -9.830824321112516],
         [0.22909030793417884, 0.003356498794675609, 0.12478748747510741, 0.19454020700136251],
         [20.271829884976523, 20.08673032746479, 20.249842683881063, 20.317445863849763]],
        [[0.013969117388114453, 0.014438000000000003, 0.014439019180379419, 0.0140480254690284],
         [0.013499668263171167, 0.01406207108646332, 0.014224290395765067, 0.013500306402823297],
         [0.013629128747795418, 0.014223201369436668, 0.01424998049590207, 0.013686398589065257],
         [0.013783184770981232, 0.014255685889331913, 0.014331138189244388, 0.01385741213653603],
         [0.013969117388114453, 0.014438000000000003, 0.014439019180379419, 0.0140480254690284],
         [0.014437852895148671, 0.014813438967136147, 0.014812926447574329, 0.014438000000000003]],
        [[-146.1109149892173, -833.6023601236839, -142.81414252150196],
         [-171.99683273326622, -922.6991798527931, -70.57541092601912],
         [-163.87602145896966, -891.5891354165128, -93.67214552189965],
         [-154.79320147879642, -862.1730822027097, -120.10562813496392],
         [-146.1109149892173, -833.6023601236839, -142.81414252150196],
         [-131.46922224896267, -779.1928494813278, -178.7286839083679]],
        [[224.64131672053023, 431.63194750865125, 120.90407092512396],
         [221.14147660372242, 431.2054930509578, 125.66878674503072],
         [221.52154356944595, 430.75451955003797, 124.18894784408546],
         [222.81017143938968, 430.169515421698, 122.5102062134232],
         [224.64131672053023, 431.63194750865125, 120.90407092512396],
         [227.6684004535661, 430.8431401389302, 115.5153045705795]],
        [[0.7502560153377824, 0.35493841166139795, 0.08830089462592203, -0.31858950204894043],
         [1.8291966542539437, 0.5896833429014741, 0.24450841569692267, -30.459738116627875],
         [1.430067983211416, 0.5182854651636887, 0.1862179766159012, -20.245455419234922],
         [1.0725241700938521, 0.43717261742064745, 0.13840713265844143, -10.260689440577877],
         [0.7502560153377824, 0.35493841166139795, 0.08830089462592203, -0.31858950204894043],
         [0.1412847617671346, 0.03862327704376548, -0.01393057886044591, 19.57044914946325]],
        [[20.412338824515203, 20.167929322959058, 20.317101393823318, 20.428451583433084],
         [10.331243794060535, 10.071882549514562, 10.21550947173044, 10.319794677098802],
         [0.26583746140158776, 0.02144534711196277, 0.13155944867232414, 0.22354632302217356],
         [-9.797218520920804, -10.053035217460547, -9.948638975821629, -9.836957924134934],
         [-19.82081378854704, -20.085643468966744, -19.969669747465765, -19.85111882162547],
         [-30.079402487840184, -30.256885747104803, -30.34137358975101, -30.27498304675738]],
        [[0.014438000000000006, 0.014813581996648307, 0.014812999999999996, 0.014438044768972952],
         [0.01423535511136494, 0.014625021473443748, 0.014624978640776701, 0.014248389491719023],
         [0.013988873939228031, 0.014438051190802086, 0.014439279770052016, 0.014052555297016149],
         [0.013788335456782975, 0.014254273345880994, 0.014340311857535837, 0.013859621398581152],
         [0.013632393206473416, 0.014217836386270676, 0.014250000000000004, 0.013686534412235465],
         [0.013499467501490761, 0.014062196183661297, 0.014223823494335127, 0.013500306648777584]],
        [[-92.77561682490051, -804.7874938436612, -189.26036608897098],
         [-100.38216244933703, -834.1851936492061, -170.47547256523163],
         [-108.32900965665091, -863.1527379436191, -148.52772271573264],
         [-115.73950933950616, -892.1828307901235, -125.12415437461419],
         [-123.76630071348433, -918.0153430538124, -95.25803622439227],
         [-132.55583818239592, -949.4036184775977, -69.08228040864316]],
        [[198.9752644882465, 437.3413806635959, 112.50114355368487],
         [198.3605715445602, 436.5463221631944, 113.93914621161264],
         [196.03560644172882, 437.2208213897607, 116.45282577103166],
         [196.30428633550423, 436.4846494565126, 118.64016803844537],
         [195.46053100180072, 435.11009722489, 121.27066822308923],
         [195.62294251697531, 435.62528278607255, 122.0899948740355]],
        [[0.14798663326415654, 0.09735534805810851, -0.063833410613697, 19.709426424844356],
         [0.45361696596026485, 0.26191433456953644, -0.033993899337748344, 9.714382440397351],
         [0.7845669012781701, 0.3956720388496468, 0.030065082576522028, -0.2551655099226371],
         [1.1094244052153532, 0.505009075886317, 0.09395206782888953, -10.219104243773806],
         [1.4271936679662935, 0.5680945664696265, 0.1568229820148409, -20.10769000025154],
         [1.7765009581583902, 0.6011626088026638, 0.21327562472853626, -30.20576254582308]],
        [[10.306899184388689, 10.04681127492367, 10.195817155980354, 10.299265959511485],
         [20.355982556312448, 20.091345440054496, 20.272254915758403, 20.37774647547684],
         [30.339992054611162, 30.05918743970017, 30.25948329139339, 30.383908973363674],
         [40.275755911022266, 40.03136702615648, 40.165256332838375, 40.29492142524271]],
        [[0.014230932961635474, 0.014625049913712997, 0.014625000000000003, 0.014248352847471132],
         [0.014438063692098097, 0.014813254768392363, 0.01481297865576748, 0.014438000000000005],
         [0.01466377767367153, 0.015023352161691879, 0.015000000000000008, 0.014670446125016732],
         [0.014999914563106802, 0.015368912621359225, 0.015190477669902917, 0.014999316504854376]],
        [[-386.383903618509, -480.686851626221, -123.09999816675236],
         [-377.91480676054, -463.65393807532075, -137.5065750406599],
         [-367.27452581358676, -454.8179474874646, -155.59323063890014],
         [-353.0962134728249, -446.36813104403865, -172.76378530805587]],
        [[218.3541168191945, 432.14231396555266, 121.75200222896315],
         [219.59931323341075, 433.3423288598121, 119.94582355661043],
         [220.72639238293706, 432.05302475804996, 119.77323691799579],
         [221.78119314903756, 431.07522142914763, 118.9696302637947]],
        [[0.47198543599803827, 0.2152906635605689, 0.015996886545692333, 9.580738528036619],
         [0.1352653396226415, 0.03939648257337526, -0.021013358228511532, 19.61881527057128],
         [-0.1521927969617295, -0.09347653345018989, -0.0646553514460999, 29.517140720420684],
         [-0.3424984121010638, -0.23718790691489364, -0.09530507938829788, 39.452098653723404]],
        [[40.1625366385464, 39.92953025308241, 40.00549523880597, 40.14432314211551],
         [50.09335986294896, 49.8881510657575, 49.95137783351336, 50.063741113016476],
         [60.01863821770834, 59.863578823958335, 59.90698552083334, 59.98818425238095],
         [70.02653075710164, 69.91009045313685, 69.93379855673703, 69.94993604830623],
         [80.03277911947833, 79.92792682386764, 79.90717691473846, 79.92387458112468]],
        [[0.015000060999351075, 0.015370601070733292, 0.01519273264114212, 0.014999332576249191],
         [0.015312532001080207, 0.015563370780448282, 0.015492714555765594, 0.015252386983526873],
         [0.015588269642857144, 0.015935135565476197, 0.015749888095238092, 0.015562083928571427],
         [0.015937679927667276, 0.016203253493342097, 0.01604149252013809, 0.015936877034358053],
         [0.01631314500620347, 0.01650710530397023, 0.01631447906327543, 0.016297226426799004]],
        [[-104.24023755924317, -729.7850453830645, -223.86946443331266],
         [-94.1218354236306, -706.4249023948402, -257.24339723107124],
         [-81.0762176646201, -686.6019451099385, -277.5267204911742],
         [-67.21310090503471, -666.2137426248264, -297.7406186265625],
         [-57.06183263715893, -644.1670996967298, -314.5682885040617]],
        [[201.7437229764581, 429.58479124331717, 108.84414738958081],
         [207.88952278011783, 429.3206285020618, 109.11548357319587],
         [209.7266189113259, 428.74434251102065, 106.73995710359445],
         [211.84305455369847, 427.85649573399706, 105.90142260348506],
         [214.90878318996042, 426.35128808748175, 118.44624033388877]],
        [[-0.4078784244054851, -0.16603259590348898, -0.10025743898628711, 39.32288344106926],
         [-0.5706170534629404, -0.28889059052247873, -0.12268977536452005, 49.26722113122722],
         [-0.7278500873078753, -0.4492236826176518, -0.1272394831247029, 59.230737269370934],
         [-0.8759755509240245, -0.6078910125256674, -0.13744714558521562, 69.30132786735112],
         [-1.0474977807131514, -0.7316063484914104, -0.13735317323516674, 79.34247220773784]],
        [[79.99221197508697, 79.91290347724424, 79.8639574637439, 79.91199305608909],
         [70.04098966773616, 69.91696011421969, 69.91177369468684, 69.95428638616528],
         [60.10447013987473, 59.95168231760614, 59.98841269074459, 60.04070372205984],
         [50.17046143874374, 49.9737807912549, 50.06045425599026, 50.13746850101529],
         [40.239202039658174, 40.01737729122713, 40.14325914674856, 40.23793496635064],
         [30.274948006093545, 30.027848524703554, 30.173600837450593, 30.28664936940053],
         [20.332373007211537, 20.06927627483974, 20.236322505608975, 20.352922374198723]],
        [[0.01631375476687543, 0.01651780208768268, 0.01631974084899095, 0.01630844718162839],
         [0.01593784445585216, 0.016206598562628335, 0.016038455338809036, 0.01593685600616017],
         [0.015584779356768884, 0.01593526566940913, 0.01574991563201196, 0.015562281226626774],
         [0.015309536076891837, 0.01556352700690402, 0.015478638554216866, 0.015256197915256535],
         [0.014999975030044072, 0.015368133262117773, 0.015190571905461348, 0.014999151021498203],
         [0.014660079710144928, 0.01501712187088274, 0.015000000000000003, 0.014666643610013174],
         [0.014438000000000005, 0.014813374599358971, 0.014812774038461533, 0.014438024973290602]],
        [[-130.75893075967173, -587.0341461765198, -288.30437770289734],
         [-137.53775789762847, -609.6279014429512, -274.17875151923585],
         [-145.58081258201582, -631.9630473216403, -257.9737707363307],
         [-154.08416622177225, -654.2987229410335, -240.23872111534098],
         [-162.52030863684493, -676.9097514055055, -221.582222680607],
         [-169.87012240229888, -699.6336874049204, -202.3063532635612],
         [-177.11256913777066, -722.3708012701642, -184.15462750646708]],
        [[204.85424008407298, 438.23669962987776, 101.06510345285545],
         [203.83585785118441, 439.5853508157245, 103.30641858654265],
         [202.85406841688558, 440.3177154046279, 104.75547215259536],
         [200.8393136489767, 439.94753219971767, 105.98360861552577],
         [198.9730671185546, 439.57677597753417, 108.42661615807282],
         [197.50469501587062, 441.70416753421165, 110.53982130768078],
         [195.8229833173345, 441.59677272565386, 111.2584862942404]],
        [[-1.0428880244954768, -0.7507652823938761, -0.13641893625608909, 79.36212601600556],
         [-0.8781336033657557, -0.6174201116257527, -0.17033020580515673, 69.33984819932067],
         [-0.7163645892627057, -0.472494335289907, -0.18536256893342878, 59.35012886571224],
         [-0.5203585763546797, -0.32357581807372177, -0.18065490062850345, 49.397531961780196],
         [-0.32194241954342984, -0.1710889313752784, -0.16421056361358577, 39.47085843833519],
         [-0.11236074632352941, -0.04152122327488688, -0.1400214109162896, 29.503667590356336],
         [0.1657046985428051, 0.1044503705221615, -0.10066528460837885, 19.666032486035217]]]

def findPos(temp):
    pos = []
    i = 0
    for t in test:
        j = 0
        for e in t:
            if e == temp:
                pos.append([i,j])
            j = j + 1
        i = i + 1
    return pos

for sen in sensor:
    res = []
    for s in seq:
        pos = findPos(s)
        length = len(pos)
        # if sen == "img" or sen == "emg" or sen == "gro":
        if sen == "img" or sen == "emg":
            pool = [0] * 3
            div = [length] * 3
        else:
            pool = [0] * 4
            div = [length] * 4

        for p in pos:
            if sen == "gro":
                # pool = np.add(data[sensor.index(sen)+p[0]*5][p[1]][:-1], pool)
                pool = np.add(data[sensor.index(sen) + p[0] * 5][p[1]], pool)
            else:
                pool = np.add(data[sensor.index(sen) + p[0] * 5][p[1]], pool)
        res.append(np.divide(pool, div))

    plt.figure()
    if sen == "cst":
        plt.title("Coarse Sun Sensor Temperature")
        plt.plot(seq, [i[0] for i in res], label='css1')
        plt.plot(seq, [i[1] for i in res], label='css2')
        plt.plot(seq, [i[2] for i in res], label='css3')
        plt.plot(seq, [i[3] for i in res], label='css4')
    elif sen == "csv":
        plt.title("Coarse Sun Sensor Voltage")
        plt.plot(seq, [i[0] for i in res], label='css1')
        plt.plot(seq, [i[1] for i in res], label='css2')
        plt.plot(seq, [i[2] for i in res], label='css3')
        plt.plot(seq, [i[3] for i in res], label='css4')
    elif sen == "gro":
        plt.title("Gyroscope")
        plt.plot(seq, [i[0] for i in res], label='x')
        plt.plot(seq, [i[1] for i in res], label='y')
        plt.plot(seq, [i[2] for i in res], label='z')
    elif sen == "img":
        plt.title("Internal Magnetometer")
        plt.plot(seq, [i[0] for i in res], label='x')
        plt.plot(seq, [i[1] for i in res], label='y')
        plt.plot(seq, [i[2] for i in res], label='z')
    elif sen == "emg":
        plt.title("External Magnetometer")
        plt.plot(seq, [i[0] for i in res], label='x')
        plt.plot(seq, [i[1] for i in res], label='y')
        plt.plot(seq, [i[2] for i in res], label='z')
    print(sen+": "+str(res))
    plt.xlabel("Temperature / ℃")
    if sen == "img" or sen == "emg":
        plt.ylabel("Magnetic Intensity / mG")
    elif sen == "gro":
        plt.ylabel("Angular velocity / °/s")
    elif sen == "cst":
        plt.ylabel("CSS temperature /  ℃")
    elif sen == "csv":
        plt.ylabel("CSS value / V")
    plt.legend(loc='upper right')

# emg, img processing
testnum = 0
imgres = {}
emgres = {}
for t in test:
    try:
        pos = t.index(20)
    except ValueError:
        testnum = testnum + 1
        continue

    imgbase = data[2 + testnum * 5][pos]
    emgbase = data[3 + testnum * 5][pos]

    eindex = 0
    for e in t:
        imgdiff = np.subtract(data[2 + testnum * 5][eindex], imgbase)
        emgdiff = np.subtract(data[3 + testnum * 5][eindex], emgbase)
        if e in imgres.keys():
            pool = np.add(imgres[e], imgdiff)
            imgres[e] = pool
        else:
            imgres[e] = imgdiff
        if e in emgres.keys():
            pool = np.add(emgres[e], emgdiff)
            emgres[e] = pool
        else:
            emgres[e] = emgdiff
        eindex = eindex + 1

    testnum = testnum + 1

# print(imgres)
# print(emgres)

# Process test 4
imgres[40] = np.divide(imgres[40], [2, 2, 2])
emgres[40] = np.divide(emgres[40], [2, 2, 2])

imgbase = data[2 + 3 * 5][0]
emgbase = data[3 + 3 * 5][0]

eindex = 0
for e in test[3]:
    imgdiff = np.add(np.subtract(data[2 + 3 * 5][eindex], imgbase), imgres[40])
    emgdiff = np.add(np.subtract(data[3 + 3 * 5][eindex], emgbase), emgres[40])
    if e in imgres.keys():
        pool = np.add(imgres[e], imgdiff)
        imgres[e] = pool
    else:
        imgres[e] = imgdiff
    if e in emgres.keys():
        pool = np.add(emgres[e], emgdiff)
        emgres[e] = pool
    else:
        emgres[e] = emgdiff
    eindex = eindex + 1

imgarr = []
emgarr = []
for i in seq:
    if i != 0 and i != 20 and i != 40:
        imgarr.append(np.divide(imgres[i], [2, 2, 2]))
        emgarr.append(np.divide(emgres[i], [2, 2, 2]))
    elif i == 0:
        imgarr.append(np.divide(imgres[i], [3, 3, 3]))
        emgarr.append(np.divide(emgres[i], [3, 3, 3]))
    else:
        imgarr.append(imgres[i])
        emgarr.append(emgres[i])

print("img: "+str(imgarr))
print("emg: "+str(emgarr))

plt.figure()
plt.title("Modified Internal Magnetometer")
plt.xlabel("Temperature / ℃")
plt.ylabel("Magnetic Intensity / mG")
plt.plot(seq, [i[0] for i in imgarr], label='x')
plt.plot(seq, [i[1] for i in imgarr], label='y')
plt.plot(seq, [i[2] for i in imgarr], label='z')
plt.legend(loc='upper right')

plt.figure()
plt.title("Modified External Magnetometer")
plt.xlabel("Temperature / ℃")
plt.ylabel("Magnetic Intensity / mG")
plt.plot(seq, [i[0] for i in emgarr], label='x')
plt.plot(seq, [i[1] for i in emgarr], label='y')
plt.plot(seq, [i[2] for i in emgarr], label='z')
plt.legend(loc='upper right')

plt.show()


